
# Boost.Context Library Build Jamfile

#          Copyright Oliver Kowalke 2009.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import common ;
import feature ;
import indirect ;
import modules ;
import os ;
import toolset ;
 import ../../config/checks/config : requires ;

feature.feature segmented-stacks : on : optional propagated composite ;
feature.compose <segmented-stacks>on : <define>BOOST_USE_SEGMENTED_STACKS ;

feature.feature htm : tsx : optional propagated composite ;
feature.compose <htm>tsx : <define>BOOST_USE_TSX ;

feature.feature valgrind : on : optional propagated composite ;
feature.compose <valgrind>on : <define>BOOST_USE_VALGRIND ;

obj is_ml_assembler : ../build/is_ml_assembler.cpp ;
explicit is_ml_assembler ;

project boost/context
    : requirements
      <target-os>windows:<define>_WIN32_WINNT=0x0601
      <target-os>linux,<toolset>gcc,<segmented-stacks>on:<cxxflags>-fsplit-stack
      <target-os>linux,<toolset>gcc,<segmented-stacks>on:<cxxflags>-DBOOST_USE_SEGMENTED_STACKS
      <toolset>gcc,<segmented-stacks>on:<linkflags>"-static-libgcc"
      <toolset>clang,<segmented-stacks>on:<cxxflags>-fsplit-stack
      <toolset>clang,<segmented-stacks>on:<cxxflags>-DBOOST_USE_SEGMENTED_STACKS
      <toolset>clang,<segmented-stacks>on:<linkflags>"-static-libgcc"
      <toolset>intel,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>intel,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <toolset>msvc,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>msvc,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <toolset>clang-win,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>clang-win,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <toolset>embarcadero,<address-model>32,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>embarcadero,<address-model>32,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <toolset>borland,<link>shared:<define>BOOST_CONTEXT_EXPORT=EXPORT
      <toolset>borland,<link>static:<define>BOOST_CONTEXT_EXPORT=
      <link>shared:<define>BOOST_CONTEXT_DYN_LINK=1
      <define>BOOST_CONTEXT_SOURCE
      <threading>multi
      [ check-target-builds is_ml_assembler "is ml assembler" : <asmflags>/safeseh ]
    : usage-requirements
      <link>shared:<define>BOOST_CONTEXT_DYN_LINK=1
      <optimization>speed:<define>BOOST_DISABLE_ASSERTS
      <variant>release:<define>BOOST_DISABLE_ASSERTS
    : source-location ../src
    ;


feature.feature binary-format
   : elf
     mach-o
     pe
     xcoff
   : propagated
     composite
     optional
   ;
feature.compose <binary-format>elf    : <define>BOOST_CONTEXT_ARCH=elf ;
feature.compose <binary-format>mach-o : <define>BOOST_CONTEXT_ARCH=macho ;
feature.compose <binary-format>pe     : <define>BOOST_CONTEXT_ARCH=pe ;
feature.compose <binary-format>xcoff  : <define>BOOST_CONTEXT_ARCH=xcoff ;

feature.feature abi
   : aapcs
     eabi
     ms
     n32
     n64
     o32
     o64
     sysv
     x32
   : propagated
     composite
     optional
   ;
for local abi in [ feature.values <abi> ] {
    feature.compose <abi>$(abi)  : <define>BOOST_CONTEXT_ABI=$(abi) ;
}

feature.feature context-impl
    : fcontext
      ucontext
      winfib
    : propagated
      composite
    ;
feature.set-default context-impl : fcontext ;
feature.compose <context-impl>ucontext : <define>BOOST_USE_UCONTEXT ;
feature.compose <context-impl>winfib : <define>BOOST_USE_WINFIB ;

# fcontext_t
alias impl_sources
    : asm/make.S
      asm/jump.S
      asm/ontop.S
      asm/tail_ontop_ppc32_sysv.cpp
    : <context-impl>fcontext
    ;

# ucontext_t
alias impl_sources
    : continuation.cpp
      fiber.cpp
    : <context-impl>ucontext
    [ requires cxx11_auto_declarations
               cxx11_constexpr
               cxx11_defaulted_functions
               cxx11_final
               cxx11_hdr_thread
               cxx11_hdr_tuple
               cxx11_lambdas
               cxx11_noexcept
               cxx11_nullptr
               cxx11_rvalue_references
               cxx11_template_aliases
               cxx11_thread_local
               cxx11_variadic_templates ]
    ;

# WinFiber
alias impl_sources
    : continuation.cpp
      fiber.cpp
    : <context-impl>winfib
    [ requires cxx11_auto_declarations
               cxx11_constexpr
               cxx11_defaulted_functions
               cxx11_final
               cxx11_hdr_thread
               cxx11_hdr_tuple
               cxx11_lambdas
               cxx11_noexcept
               cxx11_nullptr
               cxx11_rvalue_references
               cxx11_template_aliases
               cxx11_thread_local
               cxx11_variadic_templates ]
    ;

explicit impl_sources ;

alias stack_traits_sources
    : windows/stack_traits.cpp
    : <target-os>windows
    ;

alias stack_traits_sources
    : posix/stack_traits.cpp
    ;

explicit stack_traits_sources ;

lib boost_context
   : impl_sources
     stack_traits_sources
   ;

boost-install boost_context ;
